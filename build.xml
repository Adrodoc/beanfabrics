<?xml version="1.0"?>
<project name="beanfabrics" default="test" basedir=".">
	<description>Build, test and release the Beanfabrics library</description>

	<!--#################### Init constant properties ########################-->
	<property file="${basedir}/build.local.properties" />
	<property file="${basedir}/build.properties" />
					
	<!-- Folders and files -->
	<property name="lib.dir" location="${basedir}/lib" />
					
	<property name="target.dir" location="${basedir}/target" />
					
	<property name="target.bin.dir" location="${target.dir}/bin" />
	<property name="target.project.dir" location="${target.dir}/project" />
	<property name="target.javadoc.dir" location="${target.dir}/javadoc" />
					
	<property name="lib4ant.dir" location="${basedir}/lib4ant" />
	<property name="ant-googlecode.lib.dir" location="${lib4ant.dir}/ant-googlecode" />

	<property name="build.version.file" location="${basedir}/build.version" />

	<!-- Filesets and paths -->
	<fileset id="src.javadoc.fileset" dir="${basedir}">
		<include name="beanfabrics-core/src/main/java/**/*.java"/>
		<include name="beanfabrics-swing/src/main/java/**/*.java"/>
		<include name="beanfabrics-swing-goodies/src/main/java/**/*.java"/>
		<include name="beanfabrics-swt/src/main/java/**/*.java"/>
	</fileset>

	<fileset id="lib.compile.fileset" dir="${lib.dir}" description="Libraries needed to build this project.">
		<include name="slf4j/slf4j-*.jar" />
		<include name="junit/junit-*.jar" />
	</fileset>
					
	<path id="run.javadoc.classpath" description="Classpath for running javadoc">
		<fileset refid="lib.compile.fileset" />
	</path>
					
	<!--#################### Init dynamic properties ########################-->
	<target name="init">
		<echo>JVM=${java.runtime.version}</echo>
		<tstamp>
			<format property="build.time" pattern="MMM/dd/yyyy hh:mm aa z"/>
		</tstamp>
	</target>

	<target name="init-version" depends="init">
		<property file="${build.version.file}" />
	    <fail unless="version.major" message="Invalid contents for file 'build.version', missing 'version.major'."/>
	    <fail unless="version.minor" message="Invalid contents for file 'build.version', missing 'version.minor'."/>
	    <fail unless="version.build" message="Invalid contents for file 'build.version', missing 'version.build'."/>
		<fail unless="release.label" message="Invalid contents for file 'release.label', missing 'version.build'."/>
		<property name="project.version" value="${version.major}.${version.minor}.${version.build}" />
		<echo message="building ${ant.project.name} v${project.version}"/>
	</target>
					
	<target name="init-dist" depends="init, init-version">
		<property name="javadoc.jarfile" location="${target.dir}/${ant.project.name}-${project.version}-doc.jar"/>
		<property name="project.zipfile" location="${target.dir}/${ant.project.name}-${project.version}-project.zip"/>
		<property name="bin.zipfile" location="${target.dir}/${ant.project.name}-${project.version}.zip"/>
	</target>
					
	<!--#################### Build targets ########################-->
	<target name="create-classes-jars" depends="init" description="Create JARs of all sub projects containing all classes.">
		<ant inheritall="false" dir="${basedir}/beanfabrics-core/" antfile="build.xml" target="create-classes-jar" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swing/" antfile="build.xml" target="create-classes-jar" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swing-goodies/" antfile="build.xml" target="create-classes-jar" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swt/" antfile="build.xml" target="create-classes-jar" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swing-samples/" antfile="build.xml" target="create-classes-jar" />
	</target>
					
	<target name="create-src-jars" depends="init" description="Creates JARs of all sub projects containing all sources.">
		<ant inheritall="false" dir="${basedir}/beanfabrics-core/" antfile="build.xml" target="create-src-jar" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swing/" antfile="build.xml" target="create-src-jar" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swing-goodies/" antfile="build.xml" target="create-src-jar" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swt/" antfile="build.xml" target="create-src-jar" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swing-samples/" antfile="build.xml" target="create-src-jar" />
	</target>
	
	<target name="test" depends="init" description="Executes all tests of all sub projects.">
		<ant inheritall="false" dir="${basedir}/beanfabrics-core/" antfile="build.xml" target="test" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swing/" antfile="build.xml" target="test" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swing-goodies/" antfile="build.xml" target="test" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swt/" antfile="build.xml" target="test" />		
	</target>

	<target name="clean" depends="init" description="Clean up all generated files.">
		<delete dir="${target.dir}" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-core/" antfile="build.xml" target="clean" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swing/" antfile="build.xml" target="clean" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swing-goodies/" antfile="build.xml" target="clean" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swt/" antfile="build.xml" target="clean" />
		<ant inheritall="false" dir="${basedir}/beanfabrics-swing-samples/" antfile="build.xml" target="clean" />
	</target>
					
	<target name="prepare-target" depends="init, init-dist">
		<mkdir dir="${target.dir}" />
	</target>
					
	<target name="prepare-javadoc-dir" depends="init">
		<delete dir="${target.javadoc.dir}" />
		<mkdir dir="${target.javadoc.dir}" />
		<copy todir="${target.javadoc.dir}">
			<fileset dir="${basedir}" includes="build.version readme.txt license.txt lgpl.txt 3rdparty-licenses.txt" />
		</copy>
	</target>
					
	<target name="run-javadoc" depends="init, init-version, prepare-javadoc-dir" description="Run javadoc.">
		<javadoc maxmemory="64m" destdir="${target.javadoc.dir}" classpathref="run.javadoc.classpath"
			     author="true" version="true" use="true" windowtitle="${project.title} ${project.version}">
			<fileset refid="src.javadoc.fileset" />
			<doctitle><![CDATA[<h1>${project.title} ${project.version}</h1>]]></doctitle>
			<bottom><![CDATA[<i>&copy; ${project.copyright}, <a href="${project.url}">${project.url}</a></i>]]></bottom>
			<tag name="todo" scope="all" description="To do:" />
			<tag name="beaninfo" scope="types" enabled="false" />
		</javadoc>
	</target>
					
	<target name="create-javadoc-jar" depends="init, prepare-target, run-javadoc" description="Creates ZIP file with javadoc HTML files.">
		<jar destfile="${javadoc.jarfile}">
			<fileset dir="${target.javadoc.dir}" />
		</jar>
	</target>
					
	<target name="create-bin-zip" depends="init, prepare-target, create-classes-jars, create-src-jars, create-javadoc-jar" description="Create a zip file containing all deployment JARs.">
		<property name="build.bin.content.dir" location="${target.bin.dir}/${ant.project.name}"/>
		<delete dir="${build.bin.content.dir}" />
		<mkdir dir="${build.bin.content.dir}" />
		
		<copy todir="${build.bin.content.dir}"><fileset dir="${basedir}/beanfabrics-core/target"><include name="*.jar"/></fileset></copy>
		<copy todir="${build.bin.content.dir}"><fileset dir="${basedir}/beanfabrics-swing/target"><include name="*.jar"/></fileset></copy>
		<copy todir="${build.bin.content.dir}"><fileset dir="${basedir}/beanfabrics-swing-goodies/target"><include name="*.jar"/></fileset></copy>
		<copy todir="${build.bin.content.dir}"><fileset dir="${basedir}/beanfabrics-swt/target"><include name="*.jar"/></fileset></copy>		
		
		<copy file="${javadoc.jarfile}" todir="${build.bin.content.dir}" />

		<copy todir="${build.bin.content.dir}">
			<fileset dir="${basedir}" includes="build.version readme.txt license.txt 3rdparty-licenses.txt lgpl.txt" />
		</copy>
		<zip destfile="${bin.zipfile}">
			<fileset dir="${target.bin.dir}" />
		</zip>
	</target>
					
	<target name="create-project-zip" depends="init, prepare-target" description="Creates a zip file containing all project sources, libraries and build script.">
		<property name="target.project.content.dir" location="${target.project.dir}/${ant.project.name}"/>
		<delete dir="${target.project.content.dir}"/>
		<mkdir dir="${target.project.content.dir}"/>
		
		<copy todir="${target.project.content.dir}">
			<fileset dir="${basedir}">
				<exclude name="**/target/**" />
				<exclude name="build.local.properties" />
				<exclude name="build.credentials" />
				<exclude name="bin/**" />
			</fileset>
		</copy>
		
		<zip destfile="${project.zipfile}">
			<fileset dir="${target.project.dir}"/>
		</zip>
	</target>
					
	<!--#################### Upload target ########################-->
	<target name="upload" depends="init, init-dist" description="Upload files to to google code site">
		<path id="ant-googlecode.classpath">
			<fileset dir="${ant-googlecode.lib.dir}" includes="*.jar" />
		</path>
	    <taskdef name="gcupload" classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask"
	    	                     classpathref="ant-googlecode.classpath" />

	    <property file="build.credentials" />
	    <fail unless="gc.username" message="Missing property 'gc.username' from file 'build.credentials'."/>
	    <fail unless="gc.password" message="Missing property 'gc.password' from file 'build.credentials'."/>

		<basename file="${project.zipfile}" property="project.zipfile.name"/>
	    <gcupload filename="${project.zipfile}"
	              username="${gc.username}"
	              password="${gc.password}"
	           projectname="${ant.project.name}"
	      targetfilename="${project.zipfile.name}"
	             summary="${project.title} ${project.version} source distribution (source code, build files, unit tests, sample code)"
	              labels="Type-Project, ${release.label}" />

		<basename file="${bin.zipfile}" property="bin.zipfile.name"/>
		<basename file="${src.jarfile}" property="src.jarfile.name"/>
		<basename file="${javadoc.jarfile}" property="javadoc.jarfile.name"/>
		<basename file="${classes.jarfile}" property="classes.jarfile.name"/>

		<gcupload filename="${bin.zipfile}"
	              username="${gc.username}"
	              password="${gc.password}"
	           projectname="${ant.project.name}"
	      targetfilename="${bin.zipfile.name}"
	             summary="${project.title} ${project.version} binary distribution (compiled classes, sources and javadoc)"
	              labels="Type-Binary, Featured, ${release.label}" />
	</target>
					
	<!--#################### Main targets ########################-->
	<target name="dist" depends="init, clean, create-bin-zip, create-project-zip" description="Create the distribution files.">
	</target>
					
	<target name="dist-and-upload" depends="init, dist, upload" description="Release the distribution to googlecode.com">
	</target>

</project>
