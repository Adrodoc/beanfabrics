<?xml version="1.0"?>
<project name="abstract-module" default="main" basedir=".">
	<description>Build, test and deploy a Beanfabrics library module</description>

	<!-- define to load task resource relative to THIS script, not the importing script -->
	<dirname property="my.basedir" file="${ant.file.abstract-module}" />
	
	<!--#################### Init constant properties ########################-->
	<!--<property file="${basedir}/build.local.properties" />-->
	<property file="${my.basedir}/build.properties" />

	<!-- Folders and files -->
	<property name="global.lib.dir" location="${my.basedir}/lib" />

	<property name="src.dir" location="${basedir}/src" />
	<property name="src.main.java.dir" location="${src.dir}/main/java" />
	<property name="src.main.resources.dir" location="${src.dir}/main/resources" />
	<property name="src.test.java.dir" location="${src.dir}/test/java" />
	<property name="src.test.resources.dir" location="${src.dir}/test/resources" />

	<property name="target.dir" location="${basedir}/target" />
	<property name="target.classes.dir" location="${target.dir}/classes" />
	<property name="target.testclasses.dir" location="${target.dir}/test-classes" />

	<property name="target.src.dir" location="${target.dir}/src" />

	<property name="target.manifest.dir" location="${target.dir}/manifest" />
	<property name="target.manifest.file" location="${target.manifest.dir}/manifest.mf" />

	<property name="javabean-doclet.lib.dir" location="${my.basedir}/lib4ant/javabean-doclet/" />
	
	<property name="build.version.file" location="${my.basedir}/build.version" />

	<!-- Filesets and paths -->
	<fileset id="global.lib.compile.fileset" dir="${global.lib.dir}" description="Libraries needed to build this project.">
		<include name="slf4j/slf4j-*.jar" />
		<include name="junit/junit-*.jar" />
	</fileset>
	<fileset id="global.lib.runtime.fileset" dir="${global.lib.dir}" description="Libraries needed to run this project.">
		<include name="logback/logback-classic-*.jar" />
		<include name="logback/logback-core-*.jar" />
	</fileset>

	<path id="global.compile.main.classpath" description="Contains libraries required by all modules.">
		<fileset refid="global.lib.compile.fileset" />
	</path>
	<path id="compile.main.classpath" description="You can redefine this classpath in any module build script">
		<path refid="global.compile.main.classpath" />
	</path>

	<path id="compile.test.classpath" description="Classpath for compiling test classes">
		<path refid="compile.main.classpath" />
		<pathelement location="${target.classes.dir}" />
	</path>

	<path id="run.javadoc.classpath" description="Classpath for running javadoc">
		<path refid="compile.main.classpath" />
		<fileset refid="global.lib.compile.fileset" />
	</path>

	<path id="run.test.classpath" description="Classpath for running test classes">
		<path refid="compile.main.classpath" />
		<pathelement location="${target.classes.dir}" />
		<pathelement location="${target.testclasses.dir}" />
		<fileset refid="global.lib.compile.fileset" />
		<fileset refid="global.lib.runtime.fileset" />
	</path>

	<!--#################### Init dynamic properties ########################-->
	<target name="init">
		<echo>JVM=${java.runtime.version}</echo>
		<tstamp>
			<format property="build.time" pattern="MMM/dd/yyyy hh:mm aa z"/>
		</tstamp>
	</target>

	<target name="init-version" depends="init">
		<property file="${build.version.file}" />
	    <fail unless="version.major" message="Invalid contents for file 'build.version', missing 'version.major'."/>
	    <fail unless="version.minor" message="Invalid contents for file 'build.version', missing 'version.minor'."/>
	    <fail unless="version.build" message="Invalid contents for file 'build.version', missing 'version.build'."/>
		<fail unless="release.label" message="Invalid contents for file 'release.label', missing 'version.build'."/>
		<property name="project.version" value="${version.major}.${version.minor}.${version.build}" />
		<echo message="Building ${ant.project.name} v${project.version}"/>
	</target>

	<target name="init-dist" depends="init, init-version">
		<property name="classes.jarfile" location="${target.dir}/${ant.project.name}-${project.version}.jar"/>
		<property name="src.jarfile" location="${target.dir}/${ant.project.name}-${project.version}-src.jar"/>
	</target>

	<!--#################### Build targets ########################-->
	<target name="clean" depends="init" description="Clean up all generated files.">
		<delete dir="${target.dir}" />
	</target>

	<target name="prepare-classes-dir" depends="init">
		<mkdir dir="${target.dir}" />
		<delete dir="${target.classes.dir}" />
		<mkdir dir="${target.classes.dir}" />
		<mkdir dir="${target.classes.dir}/META-INF" />
		<copy todir="${target.classes.dir}/META-INF">
			<fileset dir="${my.basedir}" includes="build.version readme.txt license.txt 3rdparty-licenses.txt lgpl.txt" />
			<fileset dir="${basedir}"    includes="readme-*.txt" />
		</copy>
		<copy todir="${target.classes.dir}">
			<fileset dir="${src.main.resources.dir}" >
				<exclude name="**/log4j.properties"/>
			</fileset>
		</copy>
	</target>

	<target name="compile-main" depends="init, prepare-classes-dir">
		<echo message="current classpath: ${toString:compile.main.classpath}" />
		<javac classpathref="compile.main.classpath" destdir="${target.classes.dir}"
			   source="${compile.source}" target="${compile.target}"
			   debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
			<src path="${src.main.java.dir}" />
		</javac>
	</target>

	<target name="prepare-test-dir" depends="init">
		<delete dir="${target.testclasses.dir}" />
		<mkdir dir="${target.testclasses.dir}" />
	</target>

	<target name="compile" depends="init, compile-main" description="Compile all sources without test.">
	</target>

	<target name="compile-test" depends="init, prepare-test-dir, compile" description="Compile test classes.">
		<echo message="current main classpath: ${toString:compile.main.classpath}" />
		<echo message="current test classpath: ${toString:compile.test.classpath}" />
		<javac classpathref="compile.test.classpath" destdir="${target.testclasses.dir}"
			   source="${compile.source}" target="${compile.target}"
			   debug="${compile.debug}" deprecation="${compile.deprecation}"
			   optimize="${compile.optimize}">
			<src path="${src.test.java.dir}" />
		</javac>
		<copy todir="${target.testclasses.dir}">
			<fileset dir="${src.test.java.dir}">
				<include name="**/*.gif"/>
			</fileset>
		</copy>
	</target>

	<target name="run-test" depends="init, compile-test">
		<junit>
			<classpath refid="run.test.classpath" />
			<formatter type="brief" usefile="false" />
			<batchtest>
				<fileset dir="${target.testclasses.dir}">
					<include name="**/*Test.class"/>
					<exclude name="**/*AbstractTest.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="prepare-manifest" depends="init">
		<delete dir="${target.manifest.dir}" />
		<mkdir dir="${target.manifest.dir}" />
	</target>

	<target name="create-manifest" depends="init, prepare-manifest">
		<echo>javabean dir = ${javabean-doclet.lib.dir}</echo>
		<path id="create.manifest.classpath">
			<fileset dir="${javabean-doclet.lib.dir}" includes="**/*.jar" />
		</path>
		<delete file="${target.manifest.file}" />
		<javadoc classpathref="run.javadoc.classpath" packagenames="org.beanfabrics" package="false">
			<fileset dir="${src.main.java.dir}" includes="**/*.java" />
			<doclet name="org.beanfabrics.tools.javabean.doclet.JavaBeanManifestDoclet" pathref="create.manifest.classpath">
				<param name="-manifestDestination" value="${target.manifest.file}" />
			</doclet>
		</javadoc>
	</target>

	<target name="prepare-dist" depends="init, init-dist">
		<mkdir dir="${target.dir}" />
	</target>

	<target name="create-classes-jar" depends="init, prepare-dist, compile, create-manifest" description="Create JAR with all classes.">
		<jar destfile="${classes.jarfile}" manifest="${target.manifest.file}">
			<fileset dir="${target.classes.dir}"/>
			<manifest>
				<attribute name="Build-Date"             value="${build.time}" />
				<attribute name="Build-Version"          value="${project.version}" />
				<attribute name="Implementation-Title"   value="${project.title}" />
				<attribute name="Implementation-Version" value="${project.version}" />
				<attribute name="Implementation-Vendor"  value="${project.vendor}" />
			</manifest>
		</jar>
	</target>

	<target name="create-src-jar" depends="init, prepare-dist" description="Creates a JAR file with all sources.">
		<delete dir="${target.src.dir}" />
		<mkdir dir="${target.src.dir}" />

		<mkdir dir="${target.src.dir}/META-INF" />
		<copy todir="${target.src.dir}/META-INF">
			<fileset dir="${my.basedir}" includes="build.version readme.txt license.txt 3rdparty-licenses.txt lgpl.txt" />
			<fileset dir="${basedir}"    includes="readme-*.txt" />
		</copy>
		<copy todir="${target.src.dir}">
			<fileset dir="${src.main.java.dir}" />
			<fileset dir="${src.main.resources.dir}" />
		</copy>

		<jar destfile="${src.jarfile}">
			<fileset dir="${target.src.dir}" />
		</jar>
	</target>

	<!--#################### Main targets ########################-->
	<target name="test" depends="init, clean, compile, compile-test, run-test" description="Run tests">
	</target>

	<target name="main" depends="init, clean, compile, test" description="Make the Beanfabrics library">
	</target>
</project>
